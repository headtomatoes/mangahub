version: '3.8'

services:
  # Database (PostgreSQL)
  db:
    image: postgres:15
    container_name: mangahub_db
    restart: always
    environment:
      POSTGRES_USER: mangahub
      POSTGRES_PASSWORD: ${DB_PASS:-mangahub_secret}
      POSTGRES_DB: mangahub
    ports:
      - "5432:5432"
    volumes:
      - ./database/migrations/001_init.up.sql:/docker-entrypoint-initdb.d/001_init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mangahub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mangahub-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mangahub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - mangahub-network

  # API Server (HTTP/REST)
  api-server:
    build:
      context: .
      target: ${GO_ENV:-development}
    container_name: mangahub-api
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8084:8084"
    volumes:
      - .:/app
      - /app/tmp
    environment:
      - GO_ENV=${GO_ENV:-development}
      - SERVICE_NAME=api-server
      - HTTP_PORT=8084
      - DATABASE_URL=postgres://mangahub:${DB_PASS:-mangahub_secret}@db:5432/mangahub?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-change-in-production}
    command: ["air", "-c", ".air.api.toml"]
    networks:
      - mangahub-network

  # TCP Sync Server
  tcp-server:
    build:
      context: .
      target: ${GO_ENV:-development}
    container_name: mangahub-tcp
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8081"
    volumes:
      - .:/app
      - /app/tmp
    environment:
      - GO_ENV=${GO_ENV:-development}
      - SERVICE_NAME=tcp-server
      - TCP_PORT=8081
      - DATABASE_URL=postgres://mangahub:${DB_PASS:-mangahub_secret}@db:5432/mangahub?sslmode=disable
    command: ["air", "-c", ".air.tcp.toml"]
    networks:
      - mangahub-network

  # UDP Notify Server
  udp-server:
    build:
      context: .
      target: ${GO_ENV:-development}
    container_name: mangahub-udp
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8082:8082/udp"
    volumes:
      - .:/app
      - /app/tmp
    environment:
      - GO_ENV=${GO_ENV:-development}
      - SERVICE_NAME=udp-server
      - UDP_PORT=8082
      - DATABASE_URL=postgres://mangahub:${DB_PASS:-mangahub_secret}@db:5432/mangahub?sslmode=disable
    command: ["air", "-c", ".air.udp.toml"]
    networks:
      - mangahub-network

  # gRPC Server
  grpc-server:
    build:
      context: .
      target: ${GO_ENV:-development}
    container_name: mangahub-grpc
    restart: always
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8083:8083"
    volumes:
      - .:/app
      - /app/tmp
    environment:
      - GO_ENV=${GO_ENV:-development}
      - SERVICE_NAME=grpc-server
      - GRPC_PORT=8083
      - DATABASE_URL=postgres://mangahub:${DB_PASS:-mangahub_secret}@db:5432/mangahub?sslmode=disable
    command: ["air", "-c", ".air.grpc.toml"]
    networks:
      - mangahub-network

  # Prometheus (Optional monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: mangahub-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - mangahub-network
    profiles:
      - monitoring

  # Grafana (Optional monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: mangahub-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    networks:
      - mangahub-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  mangahub-network:
    driver: bridge
