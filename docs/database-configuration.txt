- initialize the database image: docker compose up -d db

- Check is it available or note: docker ps


- work with database server: docker exec -it mangahub_db psql -U mangahub -d mangahub

- \dt for see all table 
- \q: quit

-- if after running docker for database but the table is empty, let do:
docker cp ./database/migrations/001_init.up.sql mangahub_db:/tmp/schema.sql
docker exec -it mangahub_db psql -U mangahub -d mangahub -f /tmp/schema.sql
-- and re-open the database server

# copy/execute migration file into container via stdin
docker exec -i mangahub_db psql -U mangahub -d mangahub < database/migrations/001_init.up.sql

for api-server container checking:

# stop and remove containers + anonymous volumes (safe to re-run)
docker compose down -v

# rebuild api-server and start db + api-server
docker compose up --build -d db api-server

# follow api-server logs
docker compose logs -f api-server

# check that api-server sees the DATABASE_URL env
docker compose exec api-server sh -c 'env | grep DATABASE_URL || true'

# quick DNS check from api-server (ping may not be available; use getent if present)
docker compose exec api-server sh -c 'ping -c 1 db || getent hosts db || echo "name resolution failed"'

# test endpoints (assuming HTTP_PORT=8084 mapped)
curl -v http://localhost:8084/check-conn
curl -v http://localhost:8084/db-ping



// after any changes in code: we need to rebuild and run docker again:
docker compose build api-server
docker compose up -d api-server


# stop and remove the db service container
docker compose stop db
docker compose rm -f db

# rebuild image and start db (detached)
docker compose build db
docker compose up -d db